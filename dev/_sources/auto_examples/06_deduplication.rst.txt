
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/06_deduplication.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_06_deduplication.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_06_deduplication.py:


Deduplicating misspelled categories with deduplicate
====================================================

A common step in data analyses is grouping or analyzing data conditional on a
categorical variable. In real world datasets, there often will be slight
misspellings in the category names: This happens when, for example, data input
*should* use a drop down menu, but users are forced to input the category name
by hand. Misspellings happen and analyzing the resulting data using a simple
`GROUP BY` is not possible anymore.

This problem is however the perfect use case of *unsupervised learning*, a
category of various statical methods that find structure in data without
providing explicit labels/categories of the data a-priori. Specifically
clustering of the distance between strings can be used to find clusters
of strings that are similar to each other (e.g. differ only by a misspelling)
and hence gives us an easy tool to flag potentially misspelled category names
in an unsupervised manner.

.. GENERATED FROM PYTHON SOURCE LINES 22-34

An example
----------

Imagine the following example:
As a data scientist, our job is to analyze the data from a hospital ward.
We notice that most of the cases involve the prescription of one of three different medications:
 "Contrivan", "Genericon", or "Zipholan".
However, data entry is manual and - either because the prescribing doctor's handwriting
was hard to decipher, or due to mistakes during data input - there are multiple
spelling mistakes for these three medications.

Let's generate some example data that demonstrate this.

.. GENERATED FROM PYTHON SOURCE LINES 34-59

.. code-block:: default



    import numpy as np
    import pandas as pd
    import matplotlib.pyplot as plt
    from dirty_cat.datasets import make_deduplication_data

    # set seed for reproducibility
    np.random.seed(123)

    # our three medication names
    medications = ["Contrivan", "Genericon", "Zipholan"]
    entries_per_medications = [500, 100, 1500]

    # 5% probability of a typo per letter
    prob_mistake_per_letter = 0.05

    data = make_deduplication_data(
        medications, entries_per_medications, prob_mistake_per_letter
    )
    # we extract the unique medication names in the data & how often they appear
    unique_examples, counts = np.unique(data, return_counts=True)
    # and build a series out of them
    ex_series = pd.Series(counts, index=unique_examples)








.. GENERATED FROM PYTHON SOURCE LINES 60-62

Visualize the data
------------------

.. GENERATED FROM PYTHON SOURCE LINES 62-67

.. code-block:: default


    ex_series.plot.barh(figsize=(10, 15))
    plt.xlabel("Medication name")
    plt.ylabel("Counts")




.. image-sg:: /auto_examples/images/sphx_glr_06_deduplication_001.png
   :alt: 06 deduplication
   :srcset: /auto_examples/images/sphx_glr_06_deduplication_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    Text(23.222222222222214, 0.5, 'Counts')



.. GENERATED FROM PYTHON SOURCE LINES 68-75

We can now see clearly the structure of the data: The three original medications
are the most common ones, however there are many spelling mistakes and hence
many slight variations of the names of the original medications.

The idea is to use the fact that the string-distance of each misspelled medication
name will be closest to either the correctly or incorrectly spelled orginal
medication name - and therefore form clusters.

.. GENERATED FROM PYTHON SOURCE LINES 75-84

.. code-block:: default



    from dirty_cat import deduplicate
    from dirty_cat._deduplicate import compute_ngram_distance
    from scipy.spatial.distance import squareform

    ngram_distances = compute_ngram_distance(unique_examples)
    square_distances = squareform(ngram_distances)








.. GENERATED FROM PYTHON SOURCE LINES 85-92

We can visualize the pair-wise distance between all medication names
--------------------------------------------------------------------

Below we use a heatmap to visualize the pairwise-distance between medication names.
A darker color means that two medication names are closer together (i.e. more similar),
a lighter color means a larger distance. We can see that we are dealing with three
clusters - the original medication names and their misspellings that cluster around them.

.. GENERATED FROM PYTHON SOURCE LINES 92-100

.. code-block:: default


    import seaborn as sns

    fig, axes = plt.subplots(1, 1, figsize=(12, 12))
    sns.heatmap(
        square_distances, yticklabels=ex_series.index, xticklabels=ex_series.index, ax=axes
    )




.. image-sg:: /auto_examples/images/sphx_glr_06_deduplication_002.png
   :alt: 06 deduplication
   :srcset: /auto_examples/images/sphx_glr_06_deduplication_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <AxesSubplot: >



.. GENERATED FROM PYTHON SOURCE LINES 101-107

Clustering to suggest corrections of misspelled names
-----------------------------------------------------

The number of clusters will need some adjustment depending on the data you have.
If no fixed number of clusters is given, `deduplicate` tries to set it automatically
via the `silhouette score <https://scikit-learn.org/stable/modules/clustering.html#silhouette-coefficient>`_.

.. GENERATED FROM PYTHON SOURCE LINES 107-111

.. code-block:: default



    deduplicated_data = deduplicate(data)








.. GENERATED FROM PYTHON SOURCE LINES 112-113

We can visualize the distribution of categories in the deduplicated data:

.. GENERATED FROM PYTHON SOURCE LINES 113-123

.. code-block:: default


    deduplicated_unique_examples, deduplicated_counts = np.unique(
        deduplicated_data, return_counts=True
    )
    deduplicated_series = pd.Series(deduplicated_counts, index=deduplicated_unique_examples)

    deduplicated_series.plot.barh(figsize=(10, 15))
    plt.xlabel("Medication name")
    plt.ylabel("Counts")




.. image-sg:: /auto_examples/images/sphx_glr_06_deduplication_003.png
   :alt: 06 deduplication
   :srcset: /auto_examples/images/sphx_glr_06_deduplication_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    Text(38.722222222222214, 0.5, 'Counts')



.. GENERATED FROM PYTHON SOURCE LINES 124-132

In this example we can correct all spelling mistakes by using the ideal number
of clusters as determined by the silhouette score.

However, often the translation/deduplication won't be perfect and will require some tweaks.
In this case, we can construct and update a translation table based on the data
returned by `deduplicate`.
It consists of the (potentially) misspelled category names as indices and the
(potentially) correct categories as values.

.. GENERATED FROM PYTHON SOURCE LINES 132-139

.. code-block:: default


    # create a table that maps original -> corrected categories
    translation_table = pd.Series(deduplicated_data, index=data)

    # remove duplicates in the original data
    translation_table = translation_table[~translation_table.index.duplicated(keep="first")]








.. GENERATED FROM PYTHON SOURCE LINES 140-143

Since the number of correct spellings will likely be much smaller than the
number of original categories, we can print the estimated cluster and their
most common exemplars (the guessed correct spelling):

.. GENERATED FROM PYTHON SOURCE LINES 143-156

.. code-block:: default



    def print_corrections(spell_correct):
        correct = np.unique(spell_correct.values)
        for c in correct:
            print(
                f"Guessed correct spelling: {c!r} for "
                f"{spell_correct[spell_correct==c].index.values}"
            )


    print_corrections(translation_table)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Guessed correct spelling: 'Contrivan' for ['Contrivan' 'Cowtrivan' 'Contrihan' 'Chntrivan' 'Connrivan' 'Contriwan'
     'Contrnvnn' 'Cobtrivan' 'Contzivan' 'Cdntrixan' 'Contrisan' 'Codtrivan'
     'Conqrdvan' 'Contrdvan' 'Coytrivan' 'oontlgvan' 'Condrivan' 'Contrixfn'
     'Contrivpn' 'iontrivan' 'Contrivam']
    Guessed correct spelling: 'Genericon' for ['Genericon' 'Gszericon' 'Genwhmcon' 'Gjnericon']
    Guessed correct spelling: 'Zipholan' for ['ioptrovan' 'Zipholmn' 'Zipholan' 'Ziphhlan' 'Zipholas' 'tipholan'
     'Zgplolan' 'Ziphjlan' 'Ziplolan' 'Ziphozan' 'Ziphclen' 'Zrpholan'
     'Ziphotan' 'Zipholar' 'timholan' 'Zipholsn' 'Ziyholan' 'miphooan'
     'Zxpholan' 'Zipholzl' 'yipholan' 'Zirholan' 'Zyphqlan' 'Ziphoian'
     'Zipholun' 'Zipyolan' 'Zikholan' 'hipholan' 'Zipmolan' 'Zipfolan'
     'mipholan' 'Zipholin' 'Ziprolan' 'Zipholal' 'Zsmholan' 'Zspholan'
     'Zioholan' 'Zipholwn' 'Zipholau' 'Zipxolan' 'eipholan' 'Ziphdlan'
     'Zipholat' 'Ziphblan' 'Ziphoqan' 'Zipkolan' 'Ziphovan' 'Zipcolan'
     'Zipholon' 'Zipiolan' 'Zdpholan' 'Zmphnlan']




.. GENERATED FROM PYTHON SOURCE LINES 157-158

In case we want to adapt the translation table post-hoc we can easily do so:

.. GENERATED FROM PYTHON SOURCE LINES 158-162

.. code-block:: default


    translation_table["Gszericon"] = "Completely new category"
    new_deduplicated_data = translation_table[data]
    assert (new_deduplicated_data == "Completely new category").sum() > 0








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  3.006 seconds)


.. _sphx_glr_download_auto_examples_06_deduplication.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/dirty-cat/dirty-cat.github.io/main?filepath=dev/auto_examples/06_deduplication.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 06_deduplication.py <06_deduplication.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 06_deduplication.ipynb <06_deduplication.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
