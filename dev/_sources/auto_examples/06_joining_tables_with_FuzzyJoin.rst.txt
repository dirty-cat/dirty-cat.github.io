
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/06_joining_tables_with_FuzzyJoin.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_06_joining_tables_with_FuzzyJoin.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_06_joining_tables_with_FuzzyJoin.py:


Merging dirty tables: fuzzy join
====================================

Here we show how to combine data from different sources,
with a vocabulary not well normalized.

Joining is difficult: one entry on one side does not have
an exact match on the other side.

In this example, the :func:`fuzzy_join` function allows us to join
tables without cleaning the data by taking into account the
label variations.

To illustrate, we will join data from the `2022 World Happiness Report <https://worldhappiness.report/>`_.
with tables provided in `the World Bank open data platform <https://data.worldbank.org/>`_
in order to create a satisfying first prediction model.

.. GENERATED FROM PYTHON SOURCE LINES 22-26

Data Importing and preprocessing
--------------------------------

We import the happiness score table first:

.. GENERATED FROM PYTHON SOURCE LINES 26-34

.. code-block:: default

    import pandas as pd

    df = pd.read_csv(
        "https://raw.githubusercontent.com/dirty-cat/datasets/master/data/Happiness_report_2022.csv",
        thousands=",",
    )
    df.drop(df.tail(1).index, inplace=True)








.. GENERATED FROM PYTHON SOURCE LINES 35-36

Let's look at the table:

.. GENERATED FROM PYTHON SOURCE LINES 36-38

.. code-block:: default

    df.head(3)






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>RANK</th>
          <th>Country</th>
          <th>Happiness score</th>
          <th>Whisker-high</th>
          <th>Whisker-low</th>
          <th>Dystopia (1.83) + residual</th>
          <th>Explained by: GDP per capita</th>
          <th>Explained by: Social support</th>
          <th>Explained by: Healthy life expectancy</th>
          <th>Explained by: Freedom to make life choices</th>
          <th>Explained by: Generosity</th>
          <th>Explained by: Perceptions of corruption</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>1</td>
          <td>Finland</td>
          <td>7821.0</td>
          <td>7886.0</td>
          <td>7756.0</td>
          <td>2518.0</td>
          <td>1892.0</td>
          <td>1258.0</td>
          <td>775.0</td>
          <td>736.0</td>
          <td>109.0</td>
          <td>534.0</td>
        </tr>
        <tr>
          <th>1</th>
          <td>2</td>
          <td>Denmark</td>
          <td>7636.0</td>
          <td>7710.0</td>
          <td>7563.0</td>
          <td>2226.0</td>
          <td>1953.0</td>
          <td>1243.0</td>
          <td>777.0</td>
          <td>719.0</td>
          <td>188.0</td>
          <td>532.0</td>
        </tr>
        <tr>
          <th>2</th>
          <td>3</td>
          <td>Iceland</td>
          <td>7557.0</td>
          <td>7651.0</td>
          <td>7464.0</td>
          <td>2320.0</td>
          <td>1936.0</td>
          <td>1320.0</td>
          <td>803.0</td>
          <td>718.0</td>
          <td>270.0</td>
          <td>191.0</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 39-44

This is a table that contains the happiness index of a country along with
some of the possible explanatory factors: GDP per capita, Social support,
Generosity etc.

For more information, read the `World Happiness Report <https://worldhappiness.report/>`_.

.. GENERATED FROM PYTHON SOURCE LINES 44-47

.. code-block:: default

    X = df[["Country"]]
    y = df[["Happiness score"]]








.. GENERATED FROM PYTHON SOURCE LINES 48-51

We keep the country names in our X table and we create
the y table with the happiness score (our prediction target, or
exogenous variable).

.. GENERATED FROM PYTHON SOURCE LINES 53-62

Additional tables from other sources
------------------------------------

Now, we need to include explanatory factors from other sources, to
complete our covariates (X table).

Interesting tables can be found on `the World Bank open data platform
<https://data.worldbank.org/>`_, for which we have a downloading
function:

.. GENERATED FROM PYTHON SOURCE LINES 62-64

.. code-block:: default

    from dirty_cat.datasets import fetch_world_bank_indicator








.. GENERATED FROM PYTHON SOURCE LINES 65-66

We extract the table containing GDP per capita by country:

.. GENERATED FROM PYTHON SOURCE LINES 66-69

.. code-block:: default

    gdppc = fetch_world_bank_indicator(indicator_id="NY.GDP.PCAP.CD").X
    gdppc.head(3)






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>Country Name</th>
          <th>GDP per capita (current US$)</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>Aruba</td>
          <td>23384.298791</td>
        </tr>
        <tr>
          <th>1</th>
          <td>Africa Eastern and Southern</td>
          <td>1557.722682</td>
        </tr>
        <tr>
          <th>2</th>
          <td>Afghanistan</td>
          <td>516.747871</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 70-71

Then another table, with life expectancy by country:

.. GENERATED FROM PYTHON SOURCE LINES 71-74

.. code-block:: default

    life_exp = fetch_world_bank_indicator("SP.DYN.LE00.IN", "life_exp").X
    life_exp.head(3)






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>Country Name</th>
          <th>Life expectancy at birth, total (years)</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>Aruba</td>
          <td>76.434000</td>
        </tr>
        <tr>
          <th>1</th>
          <td>Africa Eastern and Southern</td>
          <td>64.325702</td>
        </tr>
        <tr>
          <th>2</th>
          <td>Afghanistan</td>
          <td>65.173000</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 75-76

And a table with legal rights strength by country:

.. GENERATED FROM PYTHON SOURCE LINES 76-79

.. code-block:: default

    legal_rights = fetch_world_bank_indicator("IC.LGL.CRED.XQ").X
    legal_rights.head(3)






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>Country Name</th>
          <th>Strength of legal rights index (0=weak to 12=strong)</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>Africa Eastern and Southern</td>
          <td>4.538462</td>
        </tr>
        <tr>
          <th>1</th>
          <td>Afghanistan</td>
          <td>10.000000</td>
        </tr>
        <tr>
          <th>2</th>
          <td>Africa Western and Central</td>
          <td>5.863636</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 80-85

A correspondance problem
------------------------

Alas, the entries for countries do not perfectly match between our
original table (X), and those that we downloaded from the worldbank:

.. GENERATED FROM PYTHON SOURCE LINES 85-88

.. code-block:: default


    X.sort_values(by="Country").tail(7)






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>Country</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>29</th>
          <td>Uruguay</td>
        </tr>
        <tr>
          <th>52</th>
          <td>Uzbekistan</td>
        </tr>
        <tr>
          <th>107</th>
          <td>Venezuela</td>
        </tr>
        <tr>
          <th>76</th>
          <td>Vietnam</td>
        </tr>
        <tr>
          <th>131</th>
          <td>Yemen*</td>
        </tr>
        <tr>
          <th>136</th>
          <td>Zambia</td>
        </tr>
        <tr>
          <th>143</th>
          <td>Zimbabwe</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 89-91

.. code-block:: default

    gdppc.sort_values(by="Country Name").tail(7)






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>Country Name</th>
          <th>GDP per capita (current US$)</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>253</th>
          <td>Vietnam</td>
          <td>3694.019046</td>
        </tr>
        <tr>
          <th>252</th>
          <td>Virgin Islands (U.S.)</td>
          <td>39552.168595</td>
        </tr>
        <tr>
          <th>193</th>
          <td>West Bank and Gaza</td>
          <td>3663.969055</td>
        </tr>
        <tr>
          <th>255</th>
          <td>World</td>
          <td>12262.934615</td>
        </tr>
        <tr>
          <th>258</th>
          <td>Yemen, Rep.</td>
          <td>690.759273</td>
        </tr>
        <tr>
          <th>260</th>
          <td>Zambia</td>
          <td>1120.630171</td>
        </tr>
        <tr>
          <th>261</th>
          <td>Zimbabwe</td>
          <td>1737.173977</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 92-97

We can see that Yemen is written "Yemen*" on one side, and
"Yemen, Rep." on the other.

We also have entries that probably do not have correspondances: "World"
on one side, whereas the other table only has country-level data.

.. GENERATED FROM PYTHON SOURCE LINES 99-105

Joining tables with imperfect correspondance
--------------------------------------------

We will now join our initial table, X, with the 3 additional ones that
we have extracted.


.. GENERATED FROM PYTHON SOURCE LINES 107-111

1. Joining GDP per capita table
................................

To join them with dirty_cat, we only need to do the following:

.. GENERATED FROM PYTHON SOURCE LINES 111-124

.. code-block:: default

    from dirty_cat import fuzzy_join

    X1 = fuzzy_join(
        X,  # our table to join
        gdppc,  # the table to join with
        left_on="Country",  # the first join key column
        right_on="Country Name",  # the second join key column
        return_score=True,
    )

    X1.head(20)
    # We merged the first WB table to our initial one.






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>Country</th>
          <th>Country Name</th>
          <th>GDP per capita (current US$)</th>
          <th>matching_score</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>Finland</td>
          <td>Finland</td>
          <td>53982.614274</td>
          <td>1.000000</td>
        </tr>
        <tr>
          <th>1</th>
          <td>Denmark</td>
          <td>Denmark</td>
          <td>67803.047105</td>
          <td>1.000000</td>
        </tr>
        <tr>
          <th>2</th>
          <td>Iceland</td>
          <td>Iceland</td>
          <td>68383.765336</td>
          <td>1.000000</td>
        </tr>
        <tr>
          <th>3</th>
          <td>Switzerland</td>
          <td>Switzerland</td>
          <td>93457.440398</td>
          <td>1.000000</td>
        </tr>
        <tr>
          <th>4</th>
          <td>Netherlands</td>
          <td>Netherlands</td>
          <td>58061.001668</td>
          <td>1.000000</td>
        </tr>
        <tr>
          <th>5</th>
          <td>Luxembourg*</td>
          <td>Luxembourg</td>
          <td>135682.794275</td>
          <td>0.712015</td>
        </tr>
        <tr>
          <th>6</th>
          <td>Sweden</td>
          <td>Sweden</td>
          <td>60238.986564</td>
          <td>1.000000</td>
        </tr>
        <tr>
          <th>7</th>
          <td>Norway</td>
          <td>Norway</td>
          <td>89202.750538</td>
          <td>1.000000</td>
        </tr>
        <tr>
          <th>8</th>
          <td>Israel</td>
          <td>Israel</td>
          <td>51430.079681</td>
          <td>1.000000</td>
        </tr>
        <tr>
          <th>9</th>
          <td>New Zealand</td>
          <td>New Zealand</td>
          <td>48801.685128</td>
          <td>1.000000</td>
        </tr>
        <tr>
          <th>10</th>
          <td>Austria</td>
          <td>Austria</td>
          <td>53267.932749</td>
          <td>1.000000</td>
        </tr>
        <tr>
          <th>11</th>
          <td>Australia</td>
          <td>Australia</td>
          <td>59934.129409</td>
          <td>1.000000</td>
        </tr>
        <tr>
          <th>12</th>
          <td>Ireland</td>
          <td>Ireland</td>
          <td>99152.102572</td>
          <td>1.000000</td>
        </tr>
        <tr>
          <th>13</th>
          <td>Germany</td>
          <td>Germany</td>
          <td>50801.786711</td>
          <td>1.000000</td>
        </tr>
        <tr>
          <th>14</th>
          <td>Canada</td>
          <td>Canada</td>
          <td>52051.351465</td>
          <td>1.000000</td>
        </tr>
        <tr>
          <th>15</th>
          <td>United States</td>
          <td>United States</td>
          <td>69287.536588</td>
          <td>1.000000</td>
        </tr>
        <tr>
          <th>16</th>
          <td>United Kingdom</td>
          <td>United Kingdom</td>
          <td>47334.355315</td>
          <td>1.000000</td>
        </tr>
        <tr>
          <th>17</th>
          <td>Czechia</td>
          <td>Czechia</td>
          <td>26378.499958</td>
          <td>1.000000</td>
        </tr>
        <tr>
          <th>18</th>
          <td>Belgium</td>
          <td>Belgium</td>
          <td>51767.788572</td>
          <td>1.000000</td>
        </tr>
        <tr>
          <th>19</th>
          <td>France</td>
          <td>France</td>
          <td>43518.538513</td>
          <td>1.000000</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 125-129

.. topic:: Note:

   We fix the `return_score` parameter to `True` so as to keep the matching
   score, that we will use later to show what are the worst matches.

.. GENERATED FROM PYTHON SOURCE LINES 131-147

We see that our :func:`fuzzy_join` succesfully identified the countries,
even though some country names differ between tables.

For instance, 'Czechia' is well identified as 'Czech Republic' and
'Luxembourg*' as 'Luxembourg'.

.. topic:: Note:

   This would all be missed out if we were using other methods such as
   `pandas.merge <https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.merge.html>`_,
   which can only find exact matches.
   In this case, to reach the best result, we would have to 'manually' clean
   the data (e.g. remove the * after country name) and look
   for matching patterns in every observation.

Let's do some more inspection of the merging done.

.. GENERATED FROM PYTHON SOURCE LINES 150-151

The best way to inspect the matches is to use the following function:

.. GENERATED FROM PYTHON SOURCE LINES 151-165

.. code-block:: default

    import numpy as np


    def print_worst_matches(joined_table, n=5):
        """Prints n worst matches for inspection."""
        max_ind = np.argsort(joined_table["matching_score"], axis=0)[:n]
        max_dist = pd.Series(
            joined_table["matching_score"][max_ind.ravel()].ravel(), index=max_ind.ravel()
        )
        worst_matches = joined_table.iloc[list(max_ind.ravel())]
        worst_matches = worst_matches.assign(matching_score=max_dist)
        return worst_matches









.. GENERATED FROM PYTHON SOURCE LINES 166-168

Let's print the four worst matches, which will give
us an overview of the situation:

.. GENERATED FROM PYTHON SOURCE LINES 168-171

.. code-block:: default


    print_worst_matches(X1, n=4)






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>Country</th>
          <th>Country Name</th>
          <th>GDP per capita (current US$)</th>
          <th>matching_score</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>87</th>
          <td>Ivory Coast</td>
          <td>East Asia &amp; Pacific</td>
          <td>13037.462641</td>
          <td>0.343485</td>
        </tr>
        <tr>
          <th>121</th>
          <td>Palestinian Territories*</td>
          <td>Palau</td>
          <td>14243.864692</td>
          <td>0.344937</td>
        </tr>
        <tr>
          <th>94</th>
          <td>Laos</td>
          <td>Lao PDR</td>
          <td>2551.326081</td>
          <td>0.425257</td>
        </tr>
        <tr>
          <th>111</th>
          <td>Turkey</td>
          <td>Turkiye</td>
          <td>9586.612450</td>
          <td>0.431527</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 172-175

We see that some matches were unsuccesful
(e.g 'Palestinian Territories*' and 'Palau'),
because there is simply no match in the two tables.

.. GENERATED FROM PYTHON SOURCE LINES 177-180

In this case, it is better to use the threshold parameter
so as to include only precise-enough matches:


.. GENERATED FROM PYTHON SOURCE LINES 181-191

.. code-block:: default

    X1 = fuzzy_join(
        X,
        gdppc,
        left_on="Country",
        right_on="Country Name",
        match_score=0.35,
        return_score=True,
    )
    print_worst_matches(X1, n=4)






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>Country</th>
          <th>Country Name</th>
          <th>GDP per capita (current US$)</th>
          <th>matching_score</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>87</th>
          <td>Ivory Coast</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>0.343485</td>
        </tr>
        <tr>
          <th>121</th>
          <td>Palestinian Territories*</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>0.344937</td>
        </tr>
        <tr>
          <th>94</th>
          <td>Laos</td>
          <td>Lao PDR</td>
          <td>2551.326081</td>
          <td>0.425257</td>
        </tr>
        <tr>
          <th>111</th>
          <td>Turkey</td>
          <td>Turkiye</td>
          <td>9586.612450</td>
          <td>0.431527</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 192-194

Matches that are not available (or precise enough) are marked as `NaN`.
We will remove them, as well as missing or unused information:

.. GENERATED FROM PYTHON SOURCE LINES 194-201

.. code-block:: default


    mask = X1["GDP per capita (current US$)"].notna()
    X1 = X1[mask]
    y = np.ravel(y[mask])

    X1.drop(["matching_score"], axis=1, inplace=True)








.. GENERATED FROM PYTHON SOURCE LINES 202-204

We can finally plot and look at the link between GDP per capita
and happiness:

.. GENERATED FROM PYTHON SOURCE LINES 205-217

.. code-block:: default

    import matplotlib.pyplot as plt
    import seaborn as sns

    sns.set_context("notebook")

    plt.figure(figsize=(4, 3))
    ax = sns.regplot(x=X1["GDP per capita (current US$)"], y=y, lowess=True)
    ax.set_ylabel("Happiness index")
    ax.set_title("Is a higher GDP per capita linked to happiness?")
    plt.tight_layout()
    plt.show()




.. image-sg:: /auto_examples/images/sphx_glr_06_joining_tables_with_FuzzyJoin_001.png
   :alt: Is a higher GDP per capita linked to happiness?
   :srcset: /auto_examples/images/sphx_glr_06_joining_tables_with_FuzzyJoin_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 218-222

It seems that the happiest countries are those
having a high GDP per capita.
However, unhappy countries do not have only low levels
of GDP per capita. We have to search for other patterns.

.. GENERATED FROM PYTHON SOURCE LINES 224-229

2. Joining life expectancy table
................................

Now let's include other information that may be relevant, such as
life expectancy table:

.. GENERATED FROM PYTHON SOURCE LINES 229-240

.. code-block:: default

    X2 = fuzzy_join(
        X1,
        life_exp,
        left_on="Country",
        right_on="Country Name",
        match_score=0.45,
        how="left",
    )

    X2.head(3)






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>Country</th>
          <th>Country Name_l</th>
          <th>GDP per capita (current US$)</th>
          <th>Life expectancy at birth, total (years)</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>Finland</td>
          <td>Finland</td>
          <td>53982.614274</td>
          <td>82.131707</td>
        </tr>
        <tr>
          <th>1</th>
          <td>Denmark</td>
          <td>Denmark</td>
          <td>67803.047105</td>
          <td>81.551220</td>
        </tr>
        <tr>
          <th>2</th>
          <td>Iceland</td>
          <td>Iceland</td>
          <td>68383.765336</td>
          <td>83.065854</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 241-242

Let's plot this relation:

.. GENERATED FROM PYTHON SOURCE LINES 242-249

.. code-block:: default

    plt.figure(figsize=(4, 3))
    fig = sns.regplot(x=X2["Life expectancy at birth, total (years)"], y=y, lowess=True)
    fig.set_ylabel("Happiness index")
    fig.set_title("Is a higher life expectancy linked to happiness?")
    plt.tight_layout()
    plt.show()




.. image-sg:: /auto_examples/images/sphx_glr_06_joining_tables_with_FuzzyJoin_002.png
   :alt: Is a higher life expectancy linked to happiness?
   :srcset: /auto_examples/images/sphx_glr_06_joining_tables_with_FuzzyJoin_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 250-252

It seems the answer is yes!
Countries with higher life expectancy are also happier.

.. GENERATED FROM PYTHON SOURCE LINES 255-263

3. Joining legal rights strength table
................................
.. topic:: Note:

   Here, we use the `keep='left'` option to keep only the left key matching
   column, so as not to have unnecessary overlaping column with country names.

And the table with a measure of legal rights strength in the country:

.. GENERATED FROM PYTHON SOURCE LINES 263-274

.. code-block:: default

    X3 = fuzzy_join(
        X2,
        legal_rights,
        left_on="Country",
        right_on="Country Name",
        match_score=0.45,
        how="left",
    )

    X3.head(3)






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>Country</th>
          <th>Country Name_l</th>
          <th>GDP per capita (current US$)</th>
          <th>Life expectancy at birth, total (years)</th>
          <th>Strength of legal rights index (0=weak to 12=strong)</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>Finland</td>
          <td>Finland</td>
          <td>53982.614274</td>
          <td>82.131707</td>
          <td>6.0</td>
        </tr>
        <tr>
          <th>1</th>
          <td>Denmark</td>
          <td>Denmark</td>
          <td>67803.047105</td>
          <td>81.551220</td>
          <td>8.0</td>
        </tr>
        <tr>
          <th>2</th>
          <td>Iceland</td>
          <td>Iceland</td>
          <td>68383.765336</td>
          <td>83.065854</td>
          <td>4.0</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 275-276

Let's take a look at their correspondance in a figure:

.. GENERATED FROM PYTHON SOURCE LINES 276-285

.. code-block:: default

    plt.figure(figsize=(4, 3))
    fig = sns.regplot(
        x=X3["Strength of legal rights index (0=weak to 12=strong)"], y=y, lowess=True
    )
    fig.set_ylabel("Happiness index")
    fig.set_title("Does a country's legal rights strength lead to happiness?")
    plt.tight_layout()
    plt.show()




.. image-sg:: /auto_examples/images/sphx_glr_06_joining_tables_with_FuzzyJoin_003.png
   :alt: Does a country's legal rights strength lead to happiness?
   :srcset: /auto_examples/images/sphx_glr_06_joining_tables_with_FuzzyJoin_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 286-288

From this plot, it is not clear that this measure of legal strength
is linked to happiness.

.. GENERATED FROM PYTHON SOURCE LINES 290-292

Great! Our joined table has became bigger and full of useful informations.
And now we are ready to apply a first machine learning model to it!

.. GENERATED FROM PYTHON SOURCE LINES 294-298

Prediction model
-----------------

Let us now define the model that will be used to predict the happiness score:

.. GENERATED FROM PYTHON SOURCE LINES 298-308

.. code-block:: default

    from sklearn import __version__ as sklearn_version

    if sklearn_version < "1.0":
        from sklearn.experimental import enable_hist_gradient_boosting
    from sklearn.ensemble import HistGradientBoostingRegressor
    from sklearn.model_selection import KFold

    hgdb = HistGradientBoostingRegressor(random_state=0)
    cv = KFold(n_splits=2, shuffle=True, random_state=0)








.. GENERATED FROM PYTHON SOURCE LINES 309-313

To evaluate our model, we will apply a `4-fold cross-validation`.
We evaluate our model using the `R2` score.

Let's finally assess the results of our models:

.. GENERATED FROM PYTHON SOURCE LINES 313-326

.. code-block:: default

    from sklearn.model_selection import cross_validate

    cv_results_t = cross_validate(
        hgdb, X3.select_dtypes(exclude=object), y, cv=cv, scoring="r2"
    )

    cv_r2_t = cv_results_t["test_score"]

    print(
        f"Mean R2 score with {len(X3.columns) - 2} feature columns is"
        f" {cv_r2_t.mean():.2f} +- {cv_r2_t.std():.2f}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Mean R2 score with 3 feature columns is 0.63 +- 0.00




.. GENERATED FROM PYTHON SOURCE LINES 327-338

We have a satisfying first result: an R2 of 0.63!

Data cleaning varies from dataset to dataset: there are as
many ways to clean a table as there are errors. :func:`fuzzy_join`
method is generalizable across all datasets.

Data transformation is also often very costly in both time and ressources.
:func:`fuzzy_join` is fast and easy-to-use.

Now up to you, try improving our model by adding information into it and
beating our result!


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.342 seconds)


.. _sphx_glr_download_auto_examples_06_joining_tables_with_FuzzyJoin.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/dirty-cat/dirty-cat.github.io/master?filepath=dev/auto_examples/06_joining_tables_with_FuzzyJoin.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 06_joining_tables_with_FuzzyJoin.py <06_joining_tables_with_FuzzyJoin.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 06_joining_tables_with_FuzzyJoin.ipynb <06_joining_tables_with_FuzzyJoin.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
