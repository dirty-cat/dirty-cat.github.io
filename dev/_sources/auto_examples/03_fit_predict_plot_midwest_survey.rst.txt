
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/03_fit_predict_plot_midwest_survey.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_03_fit_predict_plot_midwest_survey.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_03_fit_predict_plot_midwest_survey.py:


Semantic variation in the "Midwest"
===================================
Here's some survey data with one dirty column, consisting of
an open-ended question, on which one-hot encoding does not work well.
The other columns are more traditional categorical or numerical
variables.

Let's see how different encoding for the dirty column impact on the
score of a classification problem.

.. GENERATED FROM PYTHON SOURCE LINES 15-17

Loading the data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 17-23

.. code-block:: default

    from dirty_cat.datasets import fetch_midwest_survey
    import pandas as pd

    dataset = fetch_midwest_survey()
    df = pd.read_csv(dataset['path']).astype(str)








.. GENERATED FROM PYTHON SOURCE LINES 24-26

The challenge with this data is that it contains a free-form input
column, where people put whatever they want:

.. GENERATED FROM PYTHON SOURCE LINES 26-29

.. code-block:: default

    dirty_column = 'In your own words, what would you call the part of the country you live in now?'
    print(df[dirty_column].value_counts()[-10:])





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Midwest/Eastern.  Just East of the Mississippi should be  Mideastern.    1
    Northern climate, Alaska                                                 1
    southern plains                                                          1
    Beautiful                                                                1
    West Virginia                                                            1
    The North East                                                           1
    Appalacha                                                                1
    The Buckeye state                                                        1
    Indiana                                                                  1
    Southeast USA                                                            1
    Name: In your own words, what would you call the part of the country you live in now?, dtype: int64




.. GENERATED FROM PYTHON SOURCE LINES 30-32

Separating clean, and dirty columns as well a a column we will try to predict
------------------------------------------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 32-62

.. code-block:: default


    target_column = 'Location (Census Region)'
    clean_columns = [
        'Personally identification as a Midwesterner?',
        'Illinois in MW?',
        'Indiana in MW?',
        'Kansas in MW?',
        'Iowa in MW?',
        'Michigan in MW?',
        'Minnesota in MW?',
        'Missouri in MW?',
        'Nebraska in MW?',
        'North Dakota in MW?',
        'Ohio in MW?',
        'South Dakota in MW?',
        'Wisconsin in MW?',
        'Arkansas in MW?',
        'Colorado in MW?',
        'Kentucky in MW?',
        'Oklahoma in MW?',
        'Pennsylvania in MW?',
        'West Virginia in MW?',
        'Montana in MW?',
        'Wyoming in MW?',
        'Gender',
        'Age',
        'Household Income',
        'Education']
    y = df[target_column].values.ravel()








.. GENERATED FROM PYTHON SOURCE LINES 63-66

A pipeline for data fitting and prediction
-------------------------------------------
We first import the right encoders to transform our clean/dirty data:

.. GENERATED FROM PYTHON SOURCE LINES 66-77

.. code-block:: default

    from sklearn.preprocessing import FunctionTransformer, OneHotEncoder
    from dirty_cat import SimilarityEncoder, MinHashEncoder,\
        GapEncoder

    encoder_dict = {
        'one-hot': OneHotEncoder(handle_unknown='ignore', sparse=False),
        'similarity': SimilarityEncoder(similarity='ngram'),
        'minhash': MinHashEncoder(),
        'gap': GapEncoder(),
        'num': FunctionTransformer(None)
    }







.. GENERATED FROM PYTHON SOURCE LINES 78-82

All the clean columns are encoded once and for all, but since we
benchmark different categorical encodings for the dirty variable,
we create a function that takes an encoding as an input, and returns a \
scikit-learn pipeline for our problem.

.. GENERATED FROM PYTHON SOURCE LINES 82-106

.. code-block:: default

    from sklearn.pipeline import Pipeline
    from sklearn.compose import ColumnTransformer
    from sklearn.preprocessing import StandardScaler
    from sklearn.ensemble import RandomForestClassifier


    def make_pipeline(encoding_method):
        # static transformers from the other columns
        transformers = [('one-hot-clean', encoder_dict['one-hot'], clean_columns)]
        # adding the encoded column
        transformers += [(encoding_method + '-dirty', encoder_dict[encoding_method],
                          [dirty_column])]
        pipeline = Pipeline([
            # Use ColumnTransformer to combine the features
            ('union', ColumnTransformer(
                transformers=transformers,
                remainder='drop')),
            ('scaler', StandardScaler(with_mean=False)),
            ('classifier', RandomForestClassifier(random_state=5))
        ])

        return pipeline









.. GENERATED FROM PYTHON SOURCE LINES 107-111

Evaluation of different encoding methods
-----------------------------------------
We then loop over encoding methods, scoring the different pipeline predictions
using a cross validation score:

.. GENERATED FROM PYTHON SOURCE LINES 111-126

.. code-block:: default

    from sklearn.model_selection import cross_val_score
    from sklearn.model_selection import StratifiedKFold

    cv = StratifiedKFold(n_splits=3, random_state=12, shuffle=True)
    all_scores = {}
    for method in ['one-hot', 'similarity', 'minhash', 'gap']:
        pipeline = make_pipeline(method)
        # Now predict the census region of each participant
        scores = cross_val_score(pipeline, df, y, cv=cv)
        all_scores[method] = scores

        print('%s encoding' % method)
        print('Accuracy score:  mean: %.3f; std: %.3f\n'
              % (scores.mean(), scores.std()))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    one-hot encoding
    Accuracy score:  mean: 0.523; std: 0.010

    similarity encoding
    Accuracy score:  mean: 0.674; std: 0.008

    minhash encoding
    Accuracy score:  mean: 0.676; std: 0.001

    gap encoding
    Accuracy score:  mean: 0.667; std: 0.006





.. GENERATED FROM PYTHON SOURCE LINES 127-129

Plot the results
------------------

.. GENERATED FROM PYTHON SOURCE LINES 129-138

.. code-block:: default

    import seaborn
    import matplotlib.pyplot as plt
    plt.figure(figsize=(4, 3))
    ax = seaborn.boxplot(data=pd.DataFrame(all_scores), orient='h')
    plt.ylabel('Encoding', size=20)
    plt.xlabel('Prediction accuracy     ', size=20)
    plt.yticks(size=20)
    plt.tight_layout()




.. image:: /auto_examples/images/sphx_glr_03_fit_predict_plot_midwest_survey_001.png
    :alt: 03 fit predict plot midwest survey
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 139-140

We can see that encoding the data using a SimilarityEncoder or MinhashEncoder
instead of OneHotEncoder helps a lot in improving the cross validation score!


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  46.636 seconds)


.. _sphx_glr_download_auto_examples_03_fit_predict_plot_midwest_survey.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: 03_fit_predict_plot_midwest_survey.py <03_fit_predict_plot_midwest_survey.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: 03_fit_predict_plot_midwest_survey.ipynb <03_fit_predict_plot_midwest_survey.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
