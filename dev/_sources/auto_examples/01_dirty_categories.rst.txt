
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/01_dirty_categories.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_01_dirty_categories.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_01_dirty_categories.py:


Dirty categories: machine learning with non normalized strings
==============================================================

Including strings that represent categories often calls for much data
preparation. In particular categories may appear with many morphological
variants, when they have been manually input or assembled from diverse
sources.

Here we look at a dataset on wages [#]_ where the column 'Employee
Position Title' contains dirty categories. On such a column, standard
categorical encodings leads to very high dimensions and can lose
information on which categories are similar.

We investigate various encodings of this dirty column for the machine
learning workflow, predicting the 'Current Annual Salary' with gradient
boosted trees. First we manually assemble a complex encoder for the full
dataframe, after which we show a much simpler way, albeit with less fine
control.


.. [#] https://www.openml.org/d/42125


 .. |TV| replace::
     :class:`~dirty_cat.TableVectorizer`

 .. |Pipeline| replace::
     :class:`~sklearn.pipeline.Pipeline`

 .. |OneHotEncoder| replace::
     :class:`~sklearn.preprocessing.OneHotEncoder`

 .. |ColumnTransformer| replace::
     :class:`~sklearn.compose.ColumnTransformer`

 .. |RandomForestRegressor| replace::
     :class:`~sklearn.ensemble.RandomForestRegressor`

 .. |Gap| replace::
     :class:`~dirty_cat.GapEncoder`

 .. |MinHash| replace::
     :class:`~dirty_cat.MinHashEncoder`

 .. |HGBR| replace::
     :class:`~sklearn.ensemble.HistGradientBoostingRegressor`

 .. |SE| replace::
     :class:`~dirty_cat.SimilarityEncoder`

 .. |permutation importances| replace::
     :func:`~sklearn.inspection.permutation_importance`

.. GENERATED FROM PYTHON SOURCE LINES 57-61

The data
--------

We first retrieve the dataset:

.. GENERATED FROM PYTHON SOURCE LINES 62-66

.. code-block:: default

    from dirty_cat.datasets import fetch_employee_salaries

    employee_salaries = fetch_employee_salaries()


.. GENERATED FROM PYTHON SOURCE LINES 67-68

X, the input data (descriptions of employees):

.. GENERATED FROM PYTHON SOURCE LINES 68-71

.. code-block:: default

    X = employee_salaries.X
    X


.. GENERATED FROM PYTHON SOURCE LINES 72-73

and y, our target column (the annual salary):

.. GENERATED FROM PYTHON SOURCE LINES 73-76

.. code-block:: default

    y = employee_salaries.y
    y.name


.. GENERATED FROM PYTHON SOURCE LINES 77-78

Now, let's carry out some basic preprocessing:

.. GENERATED FROM PYTHON SOURCE LINES 78-98

.. code-block:: default

    import pandas as pd

    X["date_first_hired"] = pd.to_datetime(X["date_first_hired"])
    X["year_first_hired"] = X["date_first_hired"].apply(lambda x: x.year)
    # Get a mask of the rows with missing values in 'gender'
    mask = X.isna()["gender"]
    # And remove them
    X.dropna(subset=["gender"], inplace=True)
    y = y[~mask]

    # #############################################################################
    # Assembling a machine-learning pipeline that encodes the data
    # ------------------------------------------------------------
    #
    # The learning pipeline
    # ---------------------
    #
    # To build a learning pipeline, we need to assemble encoders for each
    # column, and apply a supervised learning model on top.


.. GENERATED FROM PYTHON SOURCE LINES 99-104

The categorical encoders
........................

An encoder is needed to turn a categorical column into a numerical
representation:

.. GENERATED FROM PYTHON SOURCE LINES 104-108

.. code-block:: default

    from sklearn.preprocessing import OneHotEncoder

    one_hot = OneHotEncoder(handle_unknown="ignore", sparse=False)


.. GENERATED FROM PYTHON SOURCE LINES 109-112

We assemble these to apply them to the relevant columns.
The |ColumnTransformer| is created by specifying a set of transformers
alongside with the column names on which each must be applied:

.. GENERATED FROM PYTHON SOURCE LINES 112-123

.. code-block:: default


    from sklearn.compose import make_column_transformer

    encoder = make_column_transformer(
        (one_hot, ["gender", "department_name", "assignment_category"]),
        ("passthrough", ["year_first_hired"]),
        # Last but not least, our dirty column
        (one_hot, ["employee_position_title"]),
        remainder="drop",
    )


.. GENERATED FROM PYTHON SOURCE LINES 124-131

Pipelining an encoder with a learner
....................................

We will use a |HGBR|,
which is a good predictor for data with heterogeneous columns
(we need to require the experimental feature for scikit-learn versions
earlier than 1.0):

.. GENERATED FROM PYTHON SOURCE LINES 131-141

.. code-block:: default

    from sklearn.experimental import enable_hist_gradient_boosting

    # We can now import the |HGBR| from ensemble
    from sklearn.ensemble import HistGradientBoostingRegressor

    # We then create a pipeline chaining our encoders to a learner
    from sklearn.pipeline import make_pipeline

    pipeline = make_pipeline(encoder, HistGradientBoostingRegressor())


.. GENERATED FROM PYTHON SOURCE LINES 142-143

The pipeline can be readily applied to the dataframe for prediction:

.. GENERATED FROM PYTHON SOURCE LINES 143-145

.. code-block:: default

    pipeline.fit(X, y)


.. GENERATED FROM PYTHON SOURCE LINES 146-151

Dirty-category encoding
-----------------------

The |OneHotEncoder| is actually not well suited to the 'Employee
Position Title' column, as this column contains 400 different entries:

.. GENERATED FROM PYTHON SOURCE LINES 151-155

.. code-block:: default

    import numpy as np

    np.unique(y)


.. GENERATED FROM PYTHON SOURCE LINES 156-160

.. _example_minhash_encoder:

We will now experiment with encoders specially made for handling
dirty columns:

.. GENERATED FROM PYTHON SOURCE LINES 160-176

.. code-block:: default


    from dirty_cat import (
        SimilarityEncoder,
        TargetEncoder,
        MinHashEncoder,
        GapEncoder,
    )

    encoders = {
        "one-hot": one_hot,
        "similarity": SimilarityEncoder(),
        "target": TargetEncoder(handle_unknown="ignore"),
        "minhash": MinHashEncoder(n_components=100),
        "gap": GapEncoder(n_components=100),
    }


.. GENERATED FROM PYTHON SOURCE LINES 177-180

We now loop over the different encoding methods,
instantiate a new |Pipeline| each time, fit it
and store the returned cross-validation score:

.. GENERATED FROM PYTHON SOURCE LINES 180-200

.. code-block:: default


    from sklearn.model_selection import cross_val_score

    all_scores = dict()

    for name, method in encoders.items():
        encoder = make_column_transformer(
            (one_hot, ["gender", "department_name", "assignment_category"]),
            ("passthrough", ["year_first_hired"]),
            # Last but not least, our dirty column
            (method, ["employee_position_title"]),
            remainder="drop",
        )

        pipeline = make_pipeline(encoder, HistGradientBoostingRegressor())
        scores = cross_val_score(pipeline, X, y)
        print(f"{name} encoding")
        print(f"r2 score:  mean: {np.mean(scores):.3f}; std: {np.std(scores):.3f}\n")
        all_scores[name] = scores


.. GENERATED FROM PYTHON SOURCE LINES 201-205

Plotting the results
....................

Finally, we plot the scores on a boxplot:

.. GENERATED FROM PYTHON SOURCE LINES 205-216

.. code-block:: default


    import seaborn
    import matplotlib.pyplot as plt

    plt.figure(figsize=(4, 3))
    ax = seaborn.boxplot(data=pd.DataFrame(all_scores), orient="h")
    plt.ylabel("Encoding", size=20)
    plt.xlabel("Prediction accuracy     ", size=20)
    plt.yticks(size=20)
    plt.tight_layout()


.. GENERATED FROM PYTHON SOURCE LINES 217-228

The clear trend is that encoders grasping similarities between categories
(|SE|, |MinHash|, and |Gap|) perform better than those discarding it.

|SE| is the best performer, but it is less scalable on big
data than the |MinHash| and |Gap|. The most scalable encoder is
the |MinHash|. On the other hand, the |Gap| has the benefit of
providing interpretable features
(see :ref:`sphx_glr_auto_examples_02_investigating_dirty_categories.py`)

|


.. GENERATED FROM PYTHON SOURCE LINES 230-239

.. _example_table_vectorizer:

A simpler way: automatic vectorization
--------------------------------------

The code to assemble a column transformer is a bit tedious. We will
now explore a simpler, automated, way of encoding the data.

Let's start again from the raw data:

.. GENERATED FROM PYTHON SOURCE LINES 239-243

.. code-block:: default

    employee_salaries = fetch_employee_salaries()
    X = employee_salaries.X
    y = employee_salaries.y


.. GENERATED FROM PYTHON SOURCE LINES 244-246

We'll drop the 'date_first_hired' column as it's redundant with
'year_first_hired'.

.. GENERATED FROM PYTHON SOURCE LINES 246-248

.. code-block:: default

    X = X.drop(["date_first_hired"], axis=1)


.. GENERATED FROM PYTHON SOURCE LINES 249-250

We still have a complex and heterogeneous dataframe:

.. GENERATED FROM PYTHON SOURCE LINES 250-252

.. code-block:: default

    X


.. GENERATED FROM PYTHON SOURCE LINES 253-255

The |TV| can to turn this dataframe into a form suited for
machine learning.

.. GENERATED FROM PYTHON SOURCE LINES 257-266

Using the TableVectorizer in a supervised-learning pipeline
-----------------------------------------------------------

Assembling the |TV| in a |Pipeline| with a powerful learner,
such as gradient boosted trees, gives **a machine-learning method that
can be readily applied to the dataframe**.

The |TV| requires at least dirty_cat 0.2.0.


.. GENERATED FROM PYTHON SOURCE LINES 266-273

.. code-block:: default


    from dirty_cat import TableVectorizer

    pipeline = make_pipeline(
        TableVectorizer(auto_cast=True), HistGradientBoostingRegressor()
    )


.. GENERATED FROM PYTHON SOURCE LINES 274-275

Let's perform a cross-validation to see how well this model predicts:

.. GENERATED FROM PYTHON SOURCE LINES 275-284

.. code-block:: default


    from sklearn.model_selection import cross_val_score

    scores = cross_val_score(pipeline, X, y, scoring="r2")

    print(f"scores={scores}")
    print(f"mean={np.mean(scores)}")
    print(f"std={np.std(scores)}")


.. GENERATED FROM PYTHON SOURCE LINES 285-288

The prediction performed here is pretty much as good as above
but the code here is much simpler as it does not involve specifying
columns manually.

.. GENERATED FROM PYTHON SOURCE LINES 290-295

Analyzing the features created
------------------------------

Let us perform the same workflow, but without the |Pipeline|, so we can
analyze the TableVectorizer's mechanisms along the way.

.. GENERATED FROM PYTHON SOURCE LINES 295-297

.. code-block:: default

    table_vec = TableVectorizer(auto_cast=True)


.. GENERATED FROM PYTHON SOURCE LINES 298-299

We split the data between train and test, and transform them:

.. GENERATED FROM PYTHON SOURCE LINES 299-308

.. code-block:: default

    from sklearn.model_selection import train_test_split

    X_train, X_test, y_train, y_test = train_test_split(
        X, y, test_size=0.15, random_state=42
    )

    X_train_enc = table_vec.fit_transform(X_train, y_train)
    X_test_enc = table_vec.transform(X_test)


.. GENERATED FROM PYTHON SOURCE LINES 309-310

The encoded data, X_train_enc and X_test_enc are numerical arrays:

.. GENERATED FROM PYTHON SOURCE LINES 310-312

.. code-block:: default

    X_train_enc


.. GENERATED FROM PYTHON SOURCE LINES 313-314

They have more columns than the original dataframe, but not much more:

.. GENERATED FROM PYTHON SOURCE LINES 314-316

.. code-block:: default

    X_train.shape, X_train_enc.shape


.. GENERATED FROM PYTHON SOURCE LINES 317-322

Inspecting the features created
...............................

The |TV| assigns a transformer for each column. We can inspect this
choice:

.. GENERATED FROM PYTHON SOURCE LINES 322-326

.. code-block:: default

    from pprint import pprint

    pprint(table_vec.transformers_)


.. GENERATED FROM PYTHON SOURCE LINES 327-340

This is what is being passed to the |ColumnTransformer| under the hood.
If you're familiar with how the latter works, it should be very intuitive.
We can notice it classified the columns 'gender' and 'assignment_category'
as low cardinality string variables.
A |OneHotEncoder| will be applied to these columns.

The vectorizer actually makes the difference between string variables
(data type ``object`` and ``string``) and categorical variables
(data type ``category``).

Next, we can have a look at the encoded feature names.

Before encoding:

.. GENERATED FROM PYTHON SOURCE LINES 340-342

.. code-block:: default

    X.columns.to_list()


.. GENERATED FROM PYTHON SOURCE LINES 343-344

After encoding (we only plot the first 8 feature names):

.. GENERATED FROM PYTHON SOURCE LINES 344-347

.. code-block:: default

    feature_names = table_vec.get_feature_names_out()
    feature_names[:8]


.. GENERATED FROM PYTHON SOURCE LINES 348-354

As we can see, it gave us interpretable columns.
This is because we used the |Gap| on the column 'division',
which was classified as a high cardinality string variable.
(default values, see |TV|'s docstring).

In total, we have a reasonable number of encoded columns:

.. GENERATED FROM PYTHON SOURCE LINES 354-357

.. code-block:: default

    len(feature_names)



.. GENERATED FROM PYTHON SOURCE LINES 358-370

Feature importances in the statistical model
--------------------------------------------

In this section, we will train a regressor, and plot the feature importances.

.. topic:: Note:

   To minimize computation time, we use the feature importances computed by the
   |RandomForestRegressor|, but you should prefer |permutation importances|
   instead (which are less subject to biases).

First, let's train the |RandomForestRegressor|:

.. GENERATED FROM PYTHON SOURCE LINES 370-376

.. code-block:: default


    from sklearn.ensemble import RandomForestRegressor

    regressor = RandomForestRegressor()
    regressor.fit(X_train_enc, y_train)


.. GENERATED FROM PYTHON SOURCE LINES 377-378

Retrieving the feature importances:

.. GENERATED FROM PYTHON SOURCE LINES 378-385

.. code-block:: default


    importances = regressor.feature_importances_
    std = np.std([tree.feature_importances_ for tree in regressor.estimators_], axis=0)
    indices = np.argsort(importances)
    # Sort from least to most
    indices = list(reversed(indices))


.. GENERATED FROM PYTHON SOURCE LINES 386-387

Plotting the results:

.. GENERATED FROM PYTHON SOURCE LINES 387-400

.. code-block:: default


    import matplotlib.pyplot as plt

    plt.figure(figsize=(12, 9))
    plt.title("Feature importances")
    n = 20
    n_indices = indices[:n]
    labels = np.array(feature_names)[n_indices]
    plt.barh(range(n), importances[n_indices], color="b", yerr=std[n_indices])
    plt.yticks(range(n), labels, size=15)
    plt.tight_layout(pad=1)
    plt.show()


.. GENERATED FROM PYTHON SOURCE LINES 401-412

We can deduce from this data that the three factors that define the
most the salary are: being hired for a long time, being a manager, and
having a permanent, full-time job :)


.. topic:: The |TV| automates preprocessing

  As this notebook demonstrates, many preprocessing steps can be
  automated by the |TV|, and the resulting pipeline can still be
  inspected, even with non-normalized entries.



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.000 seconds)


.. _sphx_glr_download_auto_examples_01_dirty_categories.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/dirty-cat/dirty-cat/main?urlpath=lab/tree/notebooks/auto_examples/01_dirty_categories.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 01_dirty_categories.py <01_dirty_categories.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 01_dirty_categories.ipynb <01_dirty_categories.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
