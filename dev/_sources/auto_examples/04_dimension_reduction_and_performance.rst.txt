.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_04_dimension_reduction_and_performance.py>`     to download the full example code
    .. rst-class:: sphx-glr-example-title

    .. _sphx_glr_auto_examples_04_dimension_reduction_and_performance.py:


Scalability considerations for similarity encoding
===================================================

Here we discuss how to apply efficiently SimilarityEncoder to larger
datasets: reducing the number of reference categories to "prototypes",
either chosen as the most frequent categories, or with kmeans clustering.


.. code-block:: default

    # Avoid the warning in scikit-learn's LogisticRegression for the change
    # in the solver
    import warnings
    warnings.simplefilter(action='ignore', category=FutureWarning)








A tool to report memory usage and run time
-------------------------------------------

For this example, we build a small tool that reports memory
usage and compute time of a function


.. code-block:: default

    from time import time
    import functools
    import memory_profiler


    def resource_used(func):
        """ Decorator that return a function that prints its usage
        """

        @functools.wraps(func)
        def wrapped_func(*args, **kwargs):
            t0 = time()
            mem, out = memory_profiler.memory_usage((func, args, kwargs),
                                                    max_usage=True,
                                                    retval=True)
            print("Run time: %.1is    Memory used: %iMb"
                  % (time() - t0, mem))
            return out

        return wrapped_func









Data Importing and preprocessing
--------------------------------

We first download the dataset:


.. code-block:: default

    from dirty_cat.datasets import fetch_traffic_violations

    data = fetch_traffic_violations()
    print(data['description'])





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/circleci/project/dirty_cat/datasets/fetching.py:207: UserWarning: content size cannot be found, downloading file from https://data.montgomerycountymd.gov/api/views/4mse-ku6q/rows.csv?accessType=DOWNLOAD as a whole
      warnings.warn('content size cannot be found, '
    The downloaded data contains the traffic_violations dataset.
    It can originally be found at: https://catalog.data.gov/dataset/ traffic-violations-56dda




Then we load it:


.. code-block:: default

    import pandas as pd

    df = pd.read_csv(data['path'])

    # Limit to 50 000 rows, for a faster example
    df = df[:50000].copy()
    df = df.dropna(axis=0)
    df = df.reset_index()




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/circleci/miniconda/envs/testenv/lib/python3.8/site-packages/sphinx_gallery/gen_rst.py:583: DtypeWarning: Columns (19,20,21,22,23,24,25,34) have mixed types.Specify dtype option on import or set low_memory=False.
      mem_max, _ = gallery_conf['call_memory'](




We will use SimilarityEncoder on the 'description' column. One
difficulty is that it has many different entries.


.. code-block:: default

    print(df['Description'].nunique())





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    160





.. code-block:: default

    print(df['Description'].value_counts()[:20])





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    DRIVING VEH. WHILE IMPAIRED BY ALCOHOL                                                               89
    DRIVING VEHICLE WHILE UNDER THE INFLUENCE OF ALCOHOL                                                 88
    NEGLIGENT DRIVING VEHICLE IN CARELESS AND IMPRUDENT MANNER ENDANGERING PROPERTY, LIFE AND PERSON     66
    DRIVER FAILURE TO OBEY PROPERLY PLACED TRAFFIC CONTROL DEVICE INSTRUCTIONS                           54
    DRIVING VEHICLE WHILE UNDER THE INFLUENCE OF ALCOHOL PER SE                                          54
    RECKLESS DRIVING VEHICLE IN WANTON AND WILLFUL DISREGARD FOR SAFETY OF PERSONS AND PROPERTY          47
    FAILURE OF INDIVIDUAL DRIVING ON HIGHWAY TO DISPLAY LICENSE TO UNIFORMED POLICE ON DEMAND            31
    FAILURE TO DRIVE VEHICLE ON RIGHT HALF OF ROADWAY WHEN REQUIRED                                      26
    DRIVING MOTOR VEHICLE ON HIGHWAY WITHOUT REQUIRED LICENSE AND AUTHORIZATION                          22
    FAILURE TO DISPLAY REGISTRATION CARD UPON DEMAND BY POLICE OFFICER                                   20
    PERSON DRIVING MOTOR VEHICLE ON HIGHWAY OR PUBLIC USE PROPERTY ON SUSPENDED LICENSE AND PRIVILEGE    19
    DRIVER FAILURE TO STOP AT STOP SIGN LINE                                                             17
    DRIVING WHILE LIC. SUSP. UNDER 16-203, 16-206A2 FAIL TO ATTEND DIP, 17-106, 26-204/206, 27-103       15
    FAILURE TO CONTROL VEHICLE SPEED ON HIGHWAY TO AVOID COLLISION                                       12
    DRIVING VEHICLE IN EXCESS OF REASONABLE AND PRUDENT SPEED ON HIGHWAY                                 11
    DRIVER CHANGING LANES WHEN UNSAFE                                                                    11
    DRIVING VEH. W/O ADEQUATE REAR REG. PLATE ILLUMINATION                                               11
    KNOWINGLY DRIVING UNINSURED VEHICLE                                                                  10
    CAUSING STANDING VEH. TO OBSTRUCT FREE VEH. PASSAGE OF ROADWAY                                        9
    DRIVER FAILING TO GIVE TURN SIGNAL CONTINUOUSLY DURING LAST 100' OF TRAVEL BEFORE TURNING             8
    Name: Description, dtype: int64




As we will see, SimilarityEncoder takes a while on such data.

SimilarityEncoder with default options
--------------------------------------

Let us build our vectorizer, using a ColumnTransformer to combine
one-hot encoding and similarity encoding


.. code-block:: default

    from sklearn.preprocessing import OneHotEncoder
    from sklearn.compose import ColumnTransformer
    from dirty_cat import SimilarityEncoder

    sim_enc = SimilarityEncoder(similarity='ngram')

    y = df['Violation Type']

    # clean columns
    transformers = [('one_hot', OneHotEncoder(sparse=False, handle_unknown='ignore'),
                     ['Alcohol',
                      'Arrest Type',
                      'Belts',
                      'Commercial License',
                      'Commercial Vehicle',
                      'Fatal',
                      'HAZMAT',
                      'Property Damage',
                      'Work Zone']),
                    ('pass', 'passthrough', ['Year']),
                    ]

    column_trans = ColumnTransformer(
        # adding the dirty column
        transformers=transformers + [('sim_enc', sim_enc, ['Description'])],
        remainder='drop')

    t0 = time()
    X = column_trans.fit_transform(df)
    t1 = time()
    print('Time to vectorize: %s' % (t1 - t0))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Time to vectorize: 0.13752150535583496




We can run a cross-validation


.. code-block:: default

    from sklearn import linear_model, pipeline, model_selection

    # We specify max_iter to avoid convergence warnings
    log_reg = linear_model.LogisticRegression(max_iter=10000)

    model = pipeline.make_pipeline(column_trans, log_reg)
    results = resource_used(model_selection.cross_validate)(model, df, y, )
    print("Cross-validation score: %s" % results['test_score'])





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Run time: 2s    Memory used: 759Mb
    Cross-validation score: [0.91351351 0.91351351 0.92972973 0.92972973 0.90810811]




Store results for later


.. code-block:: default

    scores = dict()
    scores['Default options'] = results['test_score']
    times = dict()
    times['Default options'] = results['fit_time']








Most frequent strategy to define prototypes
---------------------------------------------

The most frequent strategy selects the n most frequent values in a dirty
categorical variable to reduce the dimensionality of the problem and thus
speed things up. We select manually the number of prototypes we want to use.


.. code-block:: default

    sim_enc = SimilarityEncoder(similarity='ngram', categories='most_frequent',
                                n_prototypes=100)

    column_trans = ColumnTransformer(
        # adding the dirty column
        transformers=transformers + [('sim_enc', sim_enc, ['Description'])],
        remainder='drop')








Check now that prediction is still as good


.. code-block:: default

    model = pipeline.make_pipeline(column_trans, log_reg)
    results = resource_used(model_selection.cross_validate)(model, df, y)
    print("Cross-validation score: %s" % results['test_score'])





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Run time: 2s    Memory used: 361Mb
    Cross-validation score: [0.91351351 0.91351351 0.91891892 0.92972973 0.90810811]




Store results for later


.. code-block:: default

    scores['Most frequent'] = results['test_score']
    times['Most frequent'] = results['fit_time']








KMeans strategy to define prototypes
---------------------------------------

K-means strategy is also a dimensionality reduction technique.
SimilarityEncoder can apply a K-means and nearest neighbors algorithm
to find the prototypes. The number of prototypes is set manually.


.. code-block:: default

    sim_enc = SimilarityEncoder(similarity='ngram', categories='k-means',
                                n_prototypes=100)

    column_trans = ColumnTransformer(
        # adding the dirty column
        transformers=transformers + [('sim_enc', sim_enc, ['Description'])],
        remainder='drop')








Check now that prediction is still as good


.. code-block:: default

    model = pipeline.make_pipeline(column_trans, log_reg)
    results = resource_used(model_selection.cross_validate)(model, df, y)
    print("Cross-validation score: %s" % results['test_score'])





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Run time: 7s    Memory used: 361Mb
    Cross-validation score: [0.91351351 0.91351351 0.91891892 0.92972973 0.90810811]




Store results for later


.. code-block:: default

    scores['KMeans'] = results['test_score']
    times['KMeans'] = results['fit_time']








Plot a summary figure
----------------------


.. code-block:: default

    import seaborn
    import matplotlib.pyplot as plt

    _, (ax1, ax2) = plt.subplots(nrows=2, figsize=(4, 3))
    seaborn.boxplot(data=pd.DataFrame(scores), orient='h', ax=ax1)
    ax1.set_xlabel('Prediction accuracy', size=16)
    [t.set(size=16) for t in ax1.get_yticklabels()]

    seaborn.boxplot(data=pd.DataFrame(times), orient='h', ax=ax2)
    ax2.set_xlabel('Computation time', size=16)
    [t.set(size=16) for t in ax2.get_yticklabels()]
    plt.tight_layout()




.. image:: /auto_examples/images/sphx_glr_04_dimension_reduction_and_performance_001.png
    :alt: 04 dimension reduction and performance
    :class: sphx-glr-single-img





Reduce memory usage during encoding using float32
----------------------------------------------------------------

We use a float32 dtype in this example to show some speed and memory gains.
The use of the scikit-learn model may upcast to float64 (depending on the used
algorithm). The memory savings will then happen during the encoding.


.. code-block:: default

    import numpy as np

    sim_enc = SimilarityEncoder(similarity='ngram', dtype=np.float32,
                                categories='most_frequent', n_prototypes=100)

    y = df['Violation Type']
    # cast the year column to float32
    df['Year'] = df['Year'].astype(np.float32)
    # clean columns
    transformers = [('one_hot', OneHotEncoder(sparse=False, dtype=np.float32,
                                              handle_unknown='ignore'),
                     ['Alcohol',
                      'Arrest Type',
                      'Belts',
                      'Commercial License',
                      'Commercial Vehicle',
                      'Fatal',
                      'HAZMAT',
                      'Property Damage',
                      'Work Zone']),
                    ('pass', 'passthrough', ['Year']),
                    ]

    column_trans = ColumnTransformer(
        # adding the dirty column
        transformers=transformers + [('sim_enc', sim_enc, ['Description'])],
        remainder='drop')

    t0 = time()
    X = column_trans.fit_transform(df)
    t1 = time()
    print('Time to vectorize: %s' % (t1 - t0))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Time to vectorize: 0.1304776668548584




We can run a cross-validation to confirm the memory footprint reduction


.. code-block:: default

    model = pipeline.make_pipeline(column_trans, log_reg)
    results = resource_used(model_selection.cross_validate)(model, df, y, )
    print("Cross-validation score: %s" % results['test_score'])




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Run time: 1s    Memory used: 361Mb
    Cross-validation score: [0.91351351 0.91351351 0.91891892 0.92972973 0.90810811]





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 2 minutes  18.797 seconds)


.. _sphx_glr_download_auto_examples_04_dimension_reduction_and_performance.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: 04_dimension_reduction_and_performance.py <04_dimension_reduction_and_performance.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: 04_dimension_reduction_and_performance.ipynb <04_dimension_reduction_and_performance.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
